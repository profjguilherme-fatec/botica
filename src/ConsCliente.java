
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PC
 */
public class ConsCliente extends javax.swing.JFrame {

    /**
     * Creates new form ConsCliente
     */
    public ConsCliente() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH); // Maximiza a janela ao abrir
        carregarTabela(); // Chama o método para carregar os dados na tabela
    }
    
    private void carregarTabela() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpa a tabela antes de carregar os dados

        try {
            Conexao conexao = new Conexao();
            conexao.conectar();

            String sql;
            if (cbxDevedores.isSelected()) { // Verifica se a checkbox está selecionada
                sql = "SELECT c.cod, c.nome, " +
                      "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                      "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                      "FROM cliente c " +
                      "HAVING saldo > 0";
            } else {
                sql = "SELECT c.cod, c.nome, " +
                      "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                      "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                      "FROM cliente c";
            }

            PreparedStatement stmt = conexao.getConnection().prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("cod");
                String nome = rs.getString("nome");
                double saldo = rs.getDouble("saldo");

                // Formata o saldo como moeda
                NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));
                String saldoFormatado = formatoMoeda.format(saldo);

                // Adiciona os dados na tabela
                model.addRow(new Object[]{codigo, nome, saldoFormatado});
            }

            rs.close();
            stmt.close();
            conexao.desconectar();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PainelClientes = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisaCliente = new javax.swing.JTextField();
        tabelaCliente = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cbxDevedores = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        lblCodigo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovimento = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableItensCompra = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableItensComprados = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnPedido = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1260, 665));

        PainelClientes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Digite o nome do cliente");

        txtPesquisaCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPesquisaCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaClienteKeyReleased(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Saldo Devedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        tabelaCliente.setViewportView(jTable1);

        cbxDevedores.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxDevedores.setText("Somente com débitos");
        cbxDevedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDevedoresActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Código");

        lblCodigo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCodigo.setText("----");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Nome: ");

        lblNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNome.setText("----");

        jTableMovimento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "código", "Data", "Descrição", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMovimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMovimentoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableMovimento);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("MOVIMENTO CLIENTE");

        jTableItensCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Quantidade", "Valor Unitário", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableItensCompra);
        if (jTableItensCompra.getColumnModel().getColumnCount() > 0) {
            jTableItensCompra.getColumnModel().getColumn(0).setResizable(false);
            jTableItensCompra.getColumnModel().getColumn(1).setResizable(false);
            jTableItensCompra.getColumnModel().getColumn(2).setResizable(false);
            jTableItensCompra.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("ITENS COMPRADOS");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("DADOS DA COMPRA");

        jTableItensComprados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Data", "Descrição", "Quantidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableItensComprados);
        if (jTableItensComprados.getColumnModel().getColumnCount() > 0) {
            jTableItensComprados.getColumnModel().getColumn(0).setResizable(false);
        }

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("REALIZAR PAGAMENTO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnPedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPedido.setText("REALIZAR PEDIDO");
        btnPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedidoActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Saldo: R$");

        lblSaldo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSaldo.setText("----");

        javax.swing.GroupLayout PainelClientesLayout = new javax.swing.GroupLayout(PainelClientes);
        PainelClientes.setLayout(PainelClientesLayout);
        PainelClientesLayout.setHorizontalGroup(
            PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(PainelClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelClientesLayout.createSequentialGroup()
                        .addComponent(tabelaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelClientesLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblCodigo)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(PainelClientesLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cbxDevedores)
                            .addGap(99, 99, 99)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PainelClientesLayout.createSequentialGroup()
                        .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(108, 108, 108)
                        .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PainelClientesLayout.setVerticalGroup(
            PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxDevedores))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabelaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelClientesLayout.createSequentialGroup()
                        .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(lblCodigo))
                            .addComponent(jLabel8)
                            .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(lblNome)
                                .addComponent(lblSaldo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(23, 23, 23)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(30, 30, 30)
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(PainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton1.setText("MENU PRINCIPAL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CLIENTES");
        jLabel7.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 1241, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(PainelClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 607, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(70, 70, 70)
                    .addComponent(PainelClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(69, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtPesquisaClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaClienteKeyReleased
        String busca = txtPesquisaCliente.getText().trim(); // Obtém o texto digitado no campo
DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
model.setRowCount(0); // Limpa a tabela antes de adicionar os novos resultados

try {
    // Cria a conexão
    Conexao conexao = new Conexao();
    conexao.conectar(); // Estabelece a conexão com o banco de dados

    if (conexao.getConnection() != null) { // Verifica se a conexão foi bem-sucedida
        String sql;

        // Verifica se o campo de busca está vazio
        if (busca.isEmpty()) {
            // Consulta para todos os clientes
            sql = "SELECT c.cod, c.nome, " +
                  "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                  "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                  "FROM cliente c";
        } else {
            // Consulta para clientes que correspondem ao filtro
            sql = "SELECT c.cod, c.nome, " +
                  "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                  "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                  "FROM cliente c " +
                  "WHERE c.nome LIKE ?";
        }

        PreparedStatement stmt = conexao.getConnection().prepareStatement(sql);

        if (!busca.isEmpty()) {
            stmt.setString(1, "%" + busca + "%"); // Passa o parâmetro somente se houver busca
        }

        // Executa a consulta e obtém os resultados
        ResultSet rs = stmt.executeQuery();

        // Adiciona os resultados na tabela
        while (rs.next()) {
            int codigo = rs.getInt("cod");
            String nome = rs.getString("nome");
            double saldo = rs.getDouble("saldo");

            // Formata o saldo como moeda
            NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance(new Locale("pt", "BR")); // Formato BRL
            String saldoFormatado = formatoMoeda.format(saldo);

            // Adiciona os dados na tabela
            model.addRow(new Object[]{codigo, nome, saldoFormatado});
        }

        // Fecha os recursos de conexão
        rs.close();
        stmt.close();
    } else {
        JOptionPane.showMessageDialog(this, "Falha na conexão com o banco de dados.");
    }

    conexao.desconectar(); // Desconecta após terminar

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Erro ao buscar dados: " + ex.getMessage());
}

    }//GEN-LAST:event_txtPesquisaClienteKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
                                     
                                            
    int selectedRow = jTable1.getSelectedRow(); // Obtém a linha selecionada

    // Verifica se há uma linha selecionada
    if (selectedRow != -1) {
        // Obtém os dados da linha selecionada
        int codCliente = (Integer) jTable1.getValueAt(selectedRow, 0); // Código do cliente
        String nomeCliente = (String) jTable1.getValueAt(selectedRow, 1); // Nome do cliente
        String saldoDevedor = (String) jTable1.getValueAt(selectedRow, 2); // Saldo devedor
        
        // Atualiza as jLabels com os valores do cliente selecionado
        lblCodigo.setText(String.valueOf(codCliente));
        lblNome.setText(nomeCliente);
        lblSaldo.setText(saldoDevedor);

        // Preenche a tabela de movimentos (jTableMovimento)
        DefaultTableModel modelMovimento = (DefaultTableModel) jTableMovimento.getModel();
        modelMovimento.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

        
        
        try {
            // Cria a conexão
            Conexao conexao = new Conexao();
            conexao.conectar(); // Estabelece a conexão com o banco de dados

            if (conexao.getConnection() != null) { // Verifica se a conexão foi bem-sucedida
                // Consulta SQL para buscar apenas compras e pagamentos
                String sql = "SELECT v.cod AS codigo, v.data AS data_movimento, 'COMPRA' AS descricao, v.valor AS valor " +
                "FROM venda v " +
                "WHERE v.cliente = ? " +
                "UNION ALL " +
                "SELECT p.cod AS codigo, p.data AS data_movimento, 'PAGAMENTO' AS descricao, p.valor AS valor " +
                "FROM pagamentos p " +
                "WHERE p.cliente = ? " +
                "ORDER BY data_movimento DESC";

                // Prepara a consulta SQL
                PreparedStatement stmt = conexao.getConnection().prepareStatement(sql);
                stmt.setInt(1, codCliente); // Passa o código do cliente para a consulta
                stmt.setInt(2, codCliente); // Passa o código do cliente novamente para a consulta

                // Executa a consulta e obtém os resultados
                ResultSet rs = stmt.executeQuery();

                // Cria o formatador de data
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                // Preenche a tabela com os resultados
                while (rs.next()) {
                    // Obtém os dados do resultado
                    int codigo = rs.getInt("codigo");
                    Date dataMovimento = rs.getDate("data_movimento");
                    String descricao = rs.getString("descricao"); // VENDA ou PAGAMENTO
                    Double valor = rs.getDouble("valor");

                    // Adiciona os dados formatados na tabela
                    modelMovimento.addRow(new Object[]{codigo, sdf.format(dataMovimento), descricao, valor});
                }

                // Fecha os recursos de conexão
                rs.close();
                stmt.close();
            } else {
                JOptionPane.showMessageDialog(this, "Falha na conexão com o banco de dados.");
            }

            conexao.desconectar(); // Desconecta após terminar

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
        }

        // Preenche a tabela de itens comprados (jTableItensComprados)
        DefaultTableModel modelItensComprados = (DefaultTableModel) jTableItensComprados.getModel();
        modelItensComprados.setRowCount(0); // Limpa a tabela antes de adicionar novos dados
        DefaultTableModel modelItensCompra = (DefaultTableModel) jTableItensCompra.getModel();
        modelItensCompra.setRowCount(0); 

        try {
            // Cria a conexão
            Conexao conexao = new Conexao();
            conexao.conectar(); // Estabelece a conexão com o banco de dados

            if (conexao.getConnection() != null) { // Verifica se a conexão foi bem-sucedida
                // Consulta SQL para buscar os itens comprados
                String sqlItensComprados = "SELECT v.data, iv.descricao, iv.quant " +
                                           "FROM venda v " +
                                           "JOIN itemvenda iv ON v.cod = iv.venda " +
                                           "WHERE v.cliente = ?";

                // Prepara a consulta SQL
                PreparedStatement stmtItensComprados = conexao.getConnection().prepareStatement(sqlItensComprados);
                stmtItensComprados.setInt(1, codCliente); // Passa o código do cliente para a consulta

                // Executa a consulta e obtém os resultados
                ResultSet rsItensComprados = stmtItensComprados.executeQuery();

                // Cria o formatador de data
                SimpleDateFormat sdfItensComprados = new SimpleDateFormat("dd/MM/yyyy");

                // Preenche a tabela com os resultados
                while (rsItensComprados.next()) {
                    // Obtém os dados do resultado
                    Date data = rsItensComprados.getDate("data");
                    String descricaoItem = rsItensComprados.getString("descricao");
                    int quantidade = rsItensComprados.getInt("quant");

                    // Adiciona os dados formatados na tabela
                    modelItensComprados.addRow(new Object[]{sdfItensComprados.format(data), descricaoItem, quantidade});
                }

                // Fecha os recursos de conexão
                rsItensComprados.close();
                stmtItensComprados.close();
            } else {
                JOptionPane.showMessageDialog(this, "Falha na conexão com o banco de dados.");
            }

            conexao.desconectar(); // Desconecta após terminar

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_jTable1MouseClicked

    private void cbxDevedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDevedoresActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpa a tabela antes de carregar os dados

        try {
            Conexao conexao = new Conexao();
            conexao.conectar();

            String sql;
            if (cbxDevedores.isSelected()) {
                sql = "SELECT c.cod, c.nome, " +
                "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                "FROM cliente c " +
                "HAVING saldo > 0";
            } else {
                sql = "SELECT c.cod, c.nome, " +
                "       (IFNULL((SELECT SUM(v.valor) FROM venda v WHERE v.cliente = c.cod), 0) - " +
                "        IFNULL((SELECT SUM(p.valor) FROM pagamentos p WHERE p.cliente = c.cod), 0)) AS saldo " +
                "FROM cliente c";
            }

            PreparedStatement stmt = conexao.getConnection().prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int codigo = rs.getInt("cod");
                String nome = rs.getString("nome");
                double saldo = rs.getDouble("saldo");

                // Formata o saldo como moeda
                NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance(new Locale("pt", "BR")); // Formato BRL
                String saldoFormatado = formatoMoeda.format(saldo);

                // Adiciona os dados na tabela
                model.addRow(new Object[]{codigo, nome, saldoFormatado});
            }

            rs.close();
            stmt.close();
            conexao.desconectar();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
        }
    }//GEN-LAST:event_cbxDevedoresActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Principal principal = new Principal();
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTableMovimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMovimentoMouseClicked
        int selectedRow = jTableMovimento.getSelectedRow(); // Obtém a linha selecionada
        
     if (selectedRow != -1) {
        String descricao = (String) jTableMovimento.getValueAt(selectedRow, 2); // Descrição da movimentação

        if (descricao.equals("COMPRA")) {
            int codigoCompra = (Integer) jTableMovimento.getValueAt(selectedRow, 0); // Código da compra

            // Preenche a tabela de itens da compra (jTableItensCompra)
            DefaultTableModel modelItensCompra = (DefaultTableModel) jTableItensCompra.getModel();
            modelItensCompra.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

            try {
                // Cria a conexão
                Conexao conexao = new Conexao();
                conexao.conectar(); // Estabelece a conexão com o banco de dados

                if (conexao.getConnection() != null) { // Verifica se a conexão foi bem-sucedida
                    // Consulta SQL para buscar os itens da compra
                    String sql = "SELECT descricao, quant, valorUnit " +
                                 "FROM itemvenda " +
                                 "WHERE venda = ?";

                    // Prepara a consulta SQL
                    PreparedStatement stmt = conexao.getConnection().prepareStatement(sql);
                    stmt.setInt(1, codigoCompra); // Passa o código da compra para a consulta

                    // Executa a consulta e obtém os resultados
                    ResultSet rs = stmt.executeQuery();

                    // Preenche a tabela com os resultados
                    while (rs.next()) {
                        // Obtém os dados do resultado
                        String produto = rs.getString("descricao");
                        int quantidade = rs.getInt("quant");
                        Double valorUnitario = rs.getDouble("valorUnit");
                        Double valorTotal = quantidade * valorUnitario;

                        // Adiciona os dados formatados na tabela
                        modelItensCompra.addRow(new Object[]{produto, quantidade, valorUnitario, valorTotal});
                    }

                    // Fecha os recursos de conexão
                    rs.close();
                    stmt.close();
                } else {
                    JOptionPane.showMessageDialog(this, "Falha na conexão com o banco de dados.");
                }

                conexao.desconectar(); // Desconecta após terminar

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
            }
        }else{
            DefaultTableModel modelItensCompra = (DefaultTableModel) jTableItensCompra.getModel();
            modelItensCompra.setRowCount(0); 
        }
    }
    }//GEN-LAST:event_jTableMovimentoMouseClicked
    
    private void btnPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedidoActionPerformed
      // Verificar se um cliente foi selecionado
    if (lblCodigo.getText().equals("----") || lblNome.getText().equals("----") || lblSaldo.getText().equals("----")) {
        JOptionPane.showMessageDialog(null, "Por favor, selecione um cliente antes de continuar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtém os valores das labels
    String codigoCliente = lblCodigo.getText();
    String nomeCliente = lblNome.getText();
    String saldoCliente = lblSaldo.getText();

    // Cria uma instância do Form CadVenda
    CadVenda cadVenda = new CadVenda();

    // Define os valores nos campos do Form CadVenda
    cadVenda.setTxtCodCli(codigoCliente);
    cadVenda.setTxtNomeCli(nomeCliente);
    cadVenda.setTxtSaldoCli(saldoCliente);

    // Abre o Form CadVenda
    cadVenda.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_btnPedidoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Verificar se um cliente foi selecionado
    if (lblCodigo.getText().equals("----") || lblNome.getText().equals("----") || lblSaldo.getText().equals("----")) {
        JOptionPane.showMessageDialog(null, "Por favor, selecione um cliente antes de continuar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtém os valores das labels
    String codigoCliente = lblCodigo.getText();
    String nomeCliente = lblNome.getText();
    String saldoCliente = lblSaldo.getText();

    // Cria uma instância do Form CadPagamento
    CadPagamento cadPagamento = new CadPagamento();

    // Define os valores nos campos do Form CadPagamento
    cadPagamento.setTxtCodCli(codigoCliente);
    cadPagamento.setTxtNomeCli(nomeCliente);
    cadPagamento.setTxtSaldoCli(saldoCliente);

    // Abre o Form CadVenda
    cadPagamento.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelClientes;
    private javax.swing.JButton btnPedido;
    private javax.swing.JCheckBox cbxDevedores;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableItensCompra;
    private javax.swing.JTable jTableItensComprados;
    private javax.swing.JTable jTableMovimento;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JScrollPane tabelaCliente;
    private javax.swing.JTextField txtPesquisaCliente;
    // End of variables declaration//GEN-END:variables
}
